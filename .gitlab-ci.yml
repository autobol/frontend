stages:
  - pre-build
  - build
  - deploy

.build_template: &build_template
  tags:
    - docker
  services:
    - docker:19.03.12-dind
  image: docker

Pre-build:
  stage: pre-build
  <<: *build_template
  script:
    - docker build `
     `-t $DOCKER_USER/image_for_build_front:latest `
     `-f ./Dockerfile.pre-build `
     `--build-arg ALPINE_VERSION=$ALPINE_VERSION .
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
    - docker push $DOCKER_USER/image_for_build_front:latest
  rules:
    - if: '$RUN_REBUILD_IMAGE_FOR_BUILD != "no"'
      when: always
    - when: never


Build:
  stage: build
  <<: *build_template
  script:
    - docker build `
     `-t $DOCKER_REGISTRY/frontend:latest `
     `--build-arg YARN_VERSION=$YARN_VERSION `
     `--build-arg GRADLE_VERSION=$GRADLE_VERSION .
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
    - docker push $DOCKER_REGISTRY/frontend:latest


.deploy_teamplate: &deploy_teamplate
  stage: deploy
  script:
    - sed -i "s/NAMESPACE/$NAMESPACE/g" ./app-deploy-chart/values.yaml
    - sed -i "s/TAG/$TAG/g" ./app-deploy-chart/values.yaml
    - helm upgrade $APP_CHART app-deploy-chart

Deploy_dev:
  environment:
    name: dev
    deployment_tier: development
    url: http://dev-school-app.$NAMESPACE.school.telekom.sh/dev-ops-school/index.html
  tags:
    - aws_dev_deploy
  <<: *deploy_teamplate



Deploy_prod:
  environment:
    name: prod
    deployment_tier: production
    url: http://dev-school-app.$NAMESPACE.school.telekom.sh/dev-ops-school/index.html
  needs:
    - Deploy_dev
  tags:
    - aws_prod_deploy
  when: manual
  <<: *deploy_teamplate

